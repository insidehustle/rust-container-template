on: [push, pull_request]

name: Continuous integration

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

  container-development:
    name: build-push container
    runs-on: ubuntu-latest
    needs: [test, fmt, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup GCP
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{secrets.GCP_PROJECT}}
          service_account_key: ${{secrets.GCP_SA_KEY}}  
          export_default_credentials: true
      - name: Configure Docker
        run: |
          docker build -t eu.gcr.io/${{secrets.GCP_PROJECT}}/$GITHUB_REPOSITORY-dev:0.1.$GITHUB_RUN_ID
          docker push eu.gcr.io/${{secrets.GCP_PROJECT}}/$GITHUB_REPOSITORY-dev:0.1.$GITHUB_RUN_ID

  binary:
    - name: Create Release
      needs: [test, fmt, build]
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            body_path: RELEASENOTES.md
            draft: false
            prerelease: false
        - name: Upload Release Asset
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./my-artifact.zip
            asset_name: my-artifact.zip
            asset_content_type: application/zip

  container-release:
    name: build-push container
    runs-on: ubuntu-latest
    needs: [binary]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup GCP
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{secrets.GCP_PROJECT}}
          service_account_key: ${{secrets.GCP_SA_KEY}}  
          export_default_credentials: true
      - name: Configure Docker
        run: |
          docker build -t eu.gcr.io/${{secrets.GCP_PROJECT}}/$GITHUB_REPOSITORY:0.1.$GITHUB_RUN_ID
          docker push eu.gcr.io/${{secrets.GCP_PROJECT}}/$GITHUB_REPOSITORY:0.1.$GITHUB_RUN_ID

    